<?php

namespace App\Http\Controllers\Admin;



use App\Model\OrderRefund;
use App\Model\Order;
use App\Service\OrderService;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use TCG\Voyager\Database\Schema\SchemaManager;
use TCG\Voyager\Facades\Voyager;
use TCG\Voyager\Http\Controllers\VoyagerBaseController;

class RequestRefundController extends VoyagerBaseController
{
    public function index(Request $request)
    {
//        return Order::where("refund_status", Order::REFUND_REQUEST)->get();
//        return parent::index($request); // TODO: Change the autogenerated stub
        // GET THE SLUG, ex. 'posts', 'pages', etc.
        $slug = 'orders';

        // GET THE DataType based on the slug
        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        // Check permission
        $this->authorize('browse', app($dataType->model_name));

        $getter = $dataType->server_side ? 'paginate' : 'get';

        $search = (object) ['value' => $request->get('s'), 'key' => $request->get('key'), 'filter' => $request->get('filter')];
        $searchable = $dataType->server_side ? array_keys(SchemaManager::describeTable(app($dataType->model_name)->getTable())->toArray()) : '';
        $orderBy = $request->get('order_by');
        $sortOrder = $request->get('sort_order', null);

        // Next Get or Paginate the actual content from the MODEL that corresponds to the slug DataType
        if (strlen($dataType->model_name) != 0) {
            $model = app($dataType->model_name);
            $query = $model::select('*');

            if ($search->value && $search->key && $search->filter) {
                $search_filter = ($search->filter == 'equals') ? '=' : 'LIKE';
                $search_value = ($search->filter == 'equals') ? $search->value : '%'.$search->value.'%';
                $query->where($search->key, $search_filter, $search_value);
            }

            $dataTypeContent = call_user_func([$query->where('refund_status', Order::REFUND_REQUEST)->latest($model::CREATED_AT), $getter]);
        } else {
            // If Model doesn't exist, get data from table name
            $dataTypeContent = call_user_func([DB::table($dataType->name), $getter]);
            $model = false;
        }

        // Check if BREAD is Translatable
        if (($isModelTranslatable = is_bread_translatable($model))) {
            $dataTypeContent->load('translations');
        }

        // Check if server side pagination is enabled
        $isServerSide = isset($dataType->server_side) && $dataType->server_side;
        $view = 'admin.refund-requests.browse';

        if (view()->exists("voyager::$slug.browse")) {
            $view = 'admin.refund-requests.browse';
        }
//        return $dataTypeContent;
//        $view = 'vendor.voyager.order-refunds.browse';
//        dd($dataTypeContent);
//        $dataTypeContent = Order::where("refund_status", Order::REFUND_REQUEST)->get();
        return Voyager::view($view,compact(
                'dataType',
                'dataTypeContent',
                'isModelTranslatable',
                'search',
                'orderBy',
                'sortOrder',
                'searchable',
                'isServerSide',
                'query')
        );
    }

    public function review($id, OrderService $orderService){
        $slug = 'orders';

        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();

        if (strlen($dataType->model_name) != 0) {
            $model = app($dataType->model_name);

            // Use withTrashed() if model uses SoftDeletes and if toggle is selected
            if ($model && in_array(SoftDeletes::class, class_uses($model))) {
                $model = $model->withTrashed();
            }
            if ($dataType->scope && $dataType->scope != '' && method_exists($model, 'scope'.ucfirst($dataType->scope))) {
                $model = $model->{$dataType->scope}();
            }
            $dataTypeContent = call_user_func([$model, 'findOrFail'], $id);
        } else {
            // If Model doest exist, get data from table name
            $dataTypeContent = DB::table($dataType->name)->where('id', $id)->first();
        }

        foreach ($dataType->editRows as $key => $row) {
            $dataType->editRows[$key]['col_width'] = isset($row->details->width) ? $row->details->width : 100;
        }

        // Check permission
        $this->authorize('edit', $dataTypeContent);

        // Check if BREAD is Translatable
        $isModelTranslatable = is_bread_translatable($dataTypeContent);

        $billingTotal = $orderService->getBillingTotal($dataTypeContent);

        $view = 'admin.refund-requests.edit-add';

        if (view()->exists("voyager::$slug.edit-add")) {
            $view = "admin.refund-requests.edit-add";
        }
        $refundAmount = $orderService->getRefundAmount($dataTypeContent);

        return Voyager::view($view, compact(
            'dataType',
            'dataTypeContent',
            'billingTotal',
            'refundAmount',
            'isModelTranslatable'));
    }


    public function createRefund(Request $request, $id, OrderService $orderService)
    {

        $order=Order::where('id',$id)->first();
        $order->refund_status = $request->status;
        OrderRefund::insert([
            'order_id'=>$order->id,
            'admin_id'=>\Auth::id(),
            'billing_tax'=>$order->billing_tax,
            'billing_refund'=>$orderService->getRefundAmount($order),
            'action'=>$order->refund_status,
            'note' =>$request->note,
            'created_at'=>now()
        ]);
        $order->save();

        return redirect('/admin/refund-requests');
    }

}
